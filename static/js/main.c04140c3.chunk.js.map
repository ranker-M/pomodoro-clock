{"version":3,"sources":["App.js","index.js"],"names":["App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","session","break","pause","interval","onSession","timer","setTimer","audio","document","getElementById","increment","event","preventDefault","target","parentNode","classList","decrement","useEffect","className","id","onClick","time","paused","play","min","Math","floor","sec","showMin","timerObj","start","Date","now","setInterval","delta","startTimer","clearInterval","stopTimer","currentTime","src","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c04140c3.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [timer, setTimer] = useState({\n    session: 25 * 60 * 1000, break: 5 * 60 * 1000,\n    pause: true, interval: null, onSession: true\n  });\n  const audio = document.getElementById(\"beep\");\n\n  useEffect(() => {\n    // Update state when break length changed\n    setTimer({\n      session: timer.session, break: breakLength * 60 * 1000,\n      pause: timer.pause, interval: timer.interval, onSession: timer.onSession\n    });\n  }, [breakLength]);\n\n  useEffect(() => {\n    // Update state when session length changed\n    setTimer({\n      session: sessionLength * 60 * 1000, break: timer.break,\n      pause: timer.pause, interval: timer.interval, onSession: timer.onSession\n    });\n  }, [sessionLength]);\n\n  function playSound() {\n    // Play audio\n    var isPlaying = !audio.paused;\n    if (!isPlaying) {\n      audio.play();\n    }\n  }\n\n  function pauseSound() {\n    // Rewind audio and pause\n    var isPlaying = !audio.paused;\n\n    if (isPlaying) {\n      audio.currentTime = 0;\n      audio.pause();\n    }\n  }\n\n  function startTimer() {\n    let timerObj = { ...timer }\n    let start = Date.now();\n    let interval = setInterval(function () {\n      let delta = Date.now() - start;\n      // If session should play before\n\n      if (timerObj.onSession) {\n        // If session finished\n        if (timerObj.session - delta < 0) {\n          timerObj = {\n            session: 0, break: timerObj.break,\n            pause: false, interval: interval, onSession: false\n          };\n          setTimer(timerObj);\n        } else {\n          // if session not finished\n          timerObj = {\n            session: timerObj.session - delta, break: timerObj.break,\n            pause: false, interval: interval, onSession: true\n          };\n          setTimer(timerObj);\n          start = Date.now();\n        }\n      } else {\n        // If break finished\n        if (timerObj.break - delta < 0) {\n          timerObj = {\n            session: sessionLength * 60 * 1000, break: breakLength * 60 * 1000,\n            pause: false, interval: interval, onSession: true\n          };\n          setTimer(timerObj);\n        } else {\n          // if break not finished\n          timerObj = {\n            session: 0, break: timerObj.break - delta,\n            pause: false, interval: interval, onSession: false\n          };\n          setTimer(timerObj);\n          start = Date.now();\n        };\n      }\n    }, 1);\n  }\n\n  function stopTimer() {\n    // When counter should stop\n    let time = { ...timer };\n    clearInterval(timer.interval);\n    time.interval = null;\n    setTimer({ ...time });\n  }\n\n\n  function showMin() {\n    // Convert time milisecond to mm:ss format\n    let time = timer.onSession ? timer.session : timer.break;\n    if (time < 1000) playSound();\n    // No hour detection so when it reaches it should be handled manually\n    if (time == 60 * 60 * 1000) return \"60:00\";\n    let min = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n    let sec = Math.floor((time % (1000 * 60)) / 1000);\n    // Add 0 front to of the num if it is single diged\n    min = min / 10 < 1 ? \"0\" + min : min;\n    sec = sec / 10 < 1 ? \"0\" + sec : sec;\n    // Be sure to 00\n    min = min === 0 ? \"00\" : min;\n    sec = sec === 0 ? \"00\" : sec;\n    return \"\" + min + \":\" + sec;\n  }\n\n  function increment(event) {\n    // Increase related value between 2-60\n    event.preventDefault();\n    if (timer.pause) {\n      if (event.target.parentNode.classList[0] == \"break-length\") {\n        if (breakLength < 60) setBreakLength(breakLength + 1);\n      } else {\n        if (sessionLength < 60) setSessionLength(sessionLength + 1);\n      }\n    }\n  }\n\n  function decrement(event) {\n    //  Decrease related value between 1-59\n    event.preventDefault();\n    if (timer.pause) {\n      if (event.target.parentNode.classList[0] == \"break-length\") {\n        if (breakLength > 1) setBreakLength(breakLength - 1);\n      } else {\n        if (sessionLength > 1) setSessionLength(sessionLength - 1);\n      }\n    }\n  }\n\n  return (\n    <main className=\"main\">\n      <div className=\"clock-wrapper\">\n        <div className=\"length-selection-box\">\n          <div className=\"break-length\" key={\"break\"}>\n            <p id=\"break-label\">Break Length</p>\n            <a id=\"break-increment\" onClick={increment}>↑</a><span id=\"break-length\">{breakLength}</span><a id=\"break-decrement\" onClick={decrement}>↓</a>\n          </div>\n          <div className=\"session-length\">\n            <p id=\"session-label\">Session Length</p>\n            <a id=\"session-increment\" onClick={increment}>↑</a>\n            <span id=\"session-length\">{sessionLength}</span><a id=\"session-decrement\" onClick={decrement}>↓</a>\n          </div>\n        </div>\n        <div className=\"session\">\n          <p id=\"timer-label\">{timer.onSession ? \"Session\" : \"Break\"}</p>\n          <p id=\"session\"><span id=\"time-left\">{showMin()}</span></p>\n        </div>\n        <div className=\"button-wrapper\">\n          <a id=\"start_stop\" onClick={() => {\n            let pause = { ...timer };\n            if (pause.pause) {\n              startTimer();\n              pause.pause = false;\n            }\n            else {\n              stopTimer()\n              pause.pause = true;\n            };\n            setTimer(pause);\n          }}>Continue/Pause</a>\n          <a id=\"reset\" onClick={() => {\n            // Reset everything to their initial state\n            clearInterval(timer.interval);\n            setBreakLength(5);\n            setSessionLength(25);\n            setTimer({\n              session: 25 * 60 * 1000, break: 5 * 60 * 1000,\n              pause: true, interval: null, onSession: true\n            });\n            pauseSound();\n          }}>Restart</a>\n        </div>\n      </div>\n      <audio id=\"beep\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\" />\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}